{"version":3,"file":"index.js","sources":["../src/logger.js","../src/utils.js","../src/index.js"],"sourcesContent":["'use strict';\nconst chalk = require('chalk');\nexport default class {\n  _chalk(text, color='white') {\n    return chalk[color](text);\n  }\n\n  log(text) {\n    console.log(this._chalk(text));\n  }\n\n  warn(text) {\n    console.warn(this._chalk(text, 'yellow'));\n  }\n\n  error(text) {\n    console.error(this._chalk(text, 'red'));\n  }\n\n}\n","'use strict';\nconst spawn = require('child_process').spawn;\nimport Logger from './logger.js';\nconst logger = new Logger();\nconst inquirer = require('inquirer');\nconst logUpdate = require('log-update');\n\n\nexport default class {\n\n  spawn(command, args) {\n    return spawn(command, args);\n  }\n\n  cp(path, destination) {\n    const cp = spawn('cp', [path, destination]);\n\n    cp.stderr.on('data', data => {\n      logger.warn(data.toString());\n    });\n  }\n\n  backup(paths) {\n    for (let path of paths) {\n      this.logUpdate('backing up');\n      this.cp(path, `${path}.backup`);\n    }\n  }\n\n  restore(paths) {\n    for (let path of paths) {\n      this.logUpdate('undoing AP changes, restoring the network');\n      this.cp(`${path}.backup`, path);\n    }\n  }\n\n  prompt(questions) {\n    return new Promise((resolve, reject) => {\n      inquirer.prompt(questions).then(answers => {\n        resolve(answers)\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  logUpdate(message) {\n    logUpdate(logger._chalk(message, 'cyan'));\n  }\n}\n","'use strict';\nimport Utils from './utils';\nimport Logger from './logger.js';\nimport {spawn} from 'child_process';\nconst {stat, readFile, writeFile, unlink} = require('fs');\nconst {merge} = require('underscore');\n\nlet utils = new Utils();\nlet logger = new Logger();\n\n  class RpiAPSetup {\n    /**\n     *\n     *\n     * @param {boolean} auto on true runs init() 'default: false'\n     * */\n    constructor(auto = false) {\n      this.answers = {password: 'CurlyEyebrows692', ssid: 'RL-001', router: 100, dns: '8.8.8.8 8.8.4.4'};\n      \n      const args = process.argv;\n      const arg = args[args.length - 1];\n      if (arg === '-y' || arg === 'yes' || arg === 'y') {\n        this.yesForAll = true;\n      }\n      process.on('exit', code => {\n        if (code !== 0) {\n          this.restore();\n        }\n      });\n      if (auto) this.init();\n    }\n    \n    init() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.backupConfigs();\n          this.installPackages().then(() => {\n            this.setupAP().then(() => {\n              resolve();\n            });\n          });\n        } catch(error) {\n          reject(error);\n        }\n      });\n      \n    }\n    \n    backupConfigs() {\n      utils.backup([\n        '/etc/udhcpd.conf',\n        '/etc/network/interfaces',\n        '/etc/hostapd/hostapd.conf',\n        '/etc/default/hostapd',\n        '/etc/sysctl.conf',\n        '/etc/iptables.ipv4.nat'\n      ]);\n    }\n\n    installPackages() {\n      return new Promise(resolve => {\n        const install = utils.spawn('apt-get', ['install', 'udhcpd', 'hostapd', '-y']);\n        install.on('error', error => {\n          logger.error(error);\n        });\n        install.on('close', (code) => {\n          if (code !== 0) {\n            logger.error('error installing apt-get packages');\n          }\n          resolve();\n          install.stdin.end();\n        });\n      });\n    }\n\n    promiseTemplates(opts) {\n      return new Promise((resolve, reject) => {\n        utils.logUpdate('Setting up templates');\n        this.templates = [];\n\n        const templates = [\n          this.template(__dirname + '/templates/udhcpd.conf', opts),\n          this.template(__dirname + '/templates/hostapd'),\n          this.template(__dirname + '/templates/hostapd.conf', opts),\n          this.template(__dirname + '/templates/interfaces', opts),\n          this.template(__dirname + '/templates/sysctl.conf'),\n          this.template(__dirname + '/templates/iptables.ipv4.nat')\n        ];\n\n        Promise.all(templates).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    setupAP() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.promptUser().then(answers => {\n            this.promiseTemplates(answers).then(() => {\n              this.configure().then(() => {\n                resolve();\n              });\n            });\n          });\n        } catch(error) {\n          reject(error);\n        }\n      });\n    }\n\n    restoreNetwork() {\n      return new Promise((resolve, reject) => {\n        utils.restore([\n          '/etc/udhcpd.conf',\n          '/etc/network/interfaces',\n          '/etc/hostapd/hostapd.conf',\n          '/etc/default/hostapd',\n          '/etc/sysctl.conf',\n          '/etc/iptables.ipv4.nat'\n        ]);\n      });\n    }\n\n    promptUser() {\n      return new Promise(resolve => {\n        if (this.yesForAll) {\n          return resolve(this.answers);\n        }\n        const questions = [{\n          type: 'input',\n          name: 'dns',\n          message: 'Please provide DNS address.',\n          default: '8.8.8.8 8.8.4.4'\n        }, {\n          type: 'input',\n          name: 'ssid',\n          message: 'AP SSID',\n          default: 'RF-001'\n        }, {\n          type: 'input',\n          name: 'password',\n          message: 'AP password',\n          hidden: true,\n          default: 'CurlyEyebrows692'\n        }, {\n          type: 'input',\n          name: 'router',\n          message: 'IP 0.0.x.0',\n          default: 100\n        }];\n        utils.prompt(questions).then(answers => {\n          resolve(merge(this.answers, answers));\n        });\n      });\n    }\n\n    configure() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.configureDHCP().then(() => {\n            this.configureInterfaces().then(() => {\n              this.configureApd().then(() => {\n                this.configureNAT().then(() => {\n                  utils.spawn('touch', ['/var/lib/misc/udhcpd.leases']);\n    \n                  utils.logUpdate('Initialising AP');\n                  utils.spawn('service', ['hostapd', 'start']);\n                  utils.spawn('update-rc.d', ['hostapd', 'enable']);\n    \n                  utils.logUpdate('Initialising DHCP server');\n                  utils.spawn('service', ['udhcpd', 'start']);\n                  utils.spawn('update-rc.d', ['udhcpd', 'enable']);\n    \n                  utils.logUpdate('Configuration finished!');\n    \n                  //utils.spawn('reboot');\n                  resolve(0);\n                });\n              });\n            });\n          });\n        } catch(error) {\n          reject(error);\n        }\n      });\n    }\n\n    configureDHCP() {\n      utils.logUpdate('Configuring DHCP');\n      return new Promise(resolve => {\n          // this.transformFile('/etc/dhcpcd.conf', 'denyinterfaces wlan0'),\n        this.transformFile('/etc/udhcpd.conf', this.templates['udhcpd.conf']).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    configureInterfaces() {\n      return new Promise(resolve => {\n        utils.logUpdate('Configuring interfaces');\n        const transforms = [\n          this.transformFile('/etc/network/interfaces', this.templates['interfaces'])\n        ]\n        Promise.all(transforms).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    configureApd() {\n      utils.logUpdate('Configuring hostapd');\n      return new Promise(resolve => {\n        const transforms = [\n          this.transformFile('/etc/default/hostapd', this.templates['hostapd']),\n          this.transformFile('/etc/hostapd/hostapd.conf', this.templates['hostapd.conf'])\n        ]\n        Promise.all(transforms).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    configureNAT() {\n      return new Promise(resolve => {\n        utils.logUpdate('Configuring NAT');\n        const transforms = [\n          this.transformFile('/etc/sysctl.conf', this.templates['sysctl.conf']),\n          this.transformFile('/etc/iptables.ipv4.nat', this.templates['iptables.ipv4.nat'])\n        ]\n        Promise.all(transforms).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * @return {string} someFilename\n     * @param {string} path\n     */\n    nameFromPath(path) {\n      return path.match(/\\/(?:.(?!\\/))+$/g)[0].replace('/', '');\n    }\n\n    /**\n     * saves a template into templates\n     * @param {string} path path/to/template\n     * @param {object} args when {address: 0.0.0.0} is given <%= address %> will become 0.0.0.0\n     */\n    template(path, args) {\n      return new Promise((resolve, reject) => {\n        const name = this.nameFromPath(path);\n        readFile(path, 'utf-8', (err, content) => {\n          if (args && Object.keys(args).length) {\n            for (let arg of Object.keys(args)) {\n              if (content.includes(`<%= ${arg} %>`)) {\n                let reg = new RegExp('<%= ' + arg + ' %>', ['g']);\n                content = content.replace(reg, args[arg])\n                this.templates[name] = content;\n              }\n            }\n          } else {\n            this.templates[name] = content;\n          }\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * @param {string} path file location\n     * @param {string} context the context to add or remove\n     */\n    transformFile(path, context) {\n      return new Promise((resolve, reject) => {\n        writeFile(path, context, err => {\n          resolve();\n        });\n      });\n    }\n    restore(){\n      const arr = [\n          '/etc/udhcpd.conf',\n          '/etc/default/udhcpd',\n          '/etc/network/interfaces',\n          '/etc/hostapd/hostapd.conf',\n          '/etc/default/hostapd',\n          '/etc/sysctl.conf',\n          '/etc/iptables.ipv4.nat'\n      ];\n      for (let key of arr) {\n        spawn('sudo', ['rm', '-rf', key]);\n        spawn('sudo', ['cp', key + '.backup', key]);\n      }\n      spawn('sudo', ['reboot']);\n    }\n  }\n  export default new RpiAPSetup();"],"names":["chalk","require","text","color","log","_chalk","warn","error","spawn","logger","Logger","inquirer","logUpdate","command","args","path","destination","cp","stderr","on","data","toString","paths","questions","Promise","resolve","reject","prompt","then","answers","catch","message","stat","readFile","writeFile","unlink","merge","utils","Utils","RpiAPSetup","auto","password","ssid","router","dns","process","argv","arg","length","yesForAll","code","restore","init","backupConfigs","installPackages","setupAP","backup","install","stdin","end","opts","templates","template","__dirname","all","promptUser","promiseTemplates","configure","configureDHCP","configureInterfaces","configureApd","configureNAT","transformFile","transforms","match","replace","name","nameFromPath","err","content","Object","keys","includes","reg","RegExp","context","arr","key"],"mappings":";;;;AACA,MAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,aAAe,MAAM;SACZC,IAAP,EAAaC,QAAM,OAAnB,EAA4B;WACnBH,MAAMG,KAAN,EAAaD,IAAb,CAAP;;MAGEA,IAAJ,EAAU;YACAE,GAAR,CAAY,KAAKC,MAAL,CAAYH,IAAZ,CAAZ;;OAGGA,IAAL,EAAW;YACDI,IAAR,CAAa,KAAKD,MAAL,CAAYH,IAAZ,EAAkB,QAAlB,CAAb;;QAGIA,IAAN,EAAY;YACFK,KAAR,CAAc,KAAKF,MAAL,CAAYH,IAAZ,EAAkB,KAAlB,CAAd;;;;ACfJ,MAAMM,UAAQP,QAAQ,eAAR,EAAyBO,KAAvC;AACA,AACA,MAAMC,WAAS,IAAIC,MAAJ,EAAf;AACA,MAAMC,WAAWV,QAAQ,UAAR,CAAjB;AACA,MAAMW,YAAYX,QAAQ,YAAR,CAAlB;AAGA,YAAe,MAAM;QAEbY,OAAN,EAAeC,IAAf,EAAqB;WACZN,QAAMK,OAAN,EAAeC,IAAf,CAAP;;KAGCC,IAAH,EAASC,WAAT,EAAsB;UACdC,KAAKT,QAAM,IAAN,EAAY,CAACO,IAAD,EAAOC,WAAP,CAAZ,CAAX;OAEGE,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAqBC,QAAQ;eACpBd,IAAP,CAAYc,KAAKC,QAAL,EAAZ;KADF;;SAKKC,KAAP,EAAc;SACP,IAAIP,IAAT,IAAiBO,KAAjB,EAAwB;WACjBV,SAAL,CAAe,YAAf;WACKK,EAAL,CAAQF,IAAR,EAAe,GAAEA,IAAK,SAAtB;;;UAIIO,KAAR,EAAe;SACR,IAAIP,IAAT,IAAiBO,KAAjB,EAAwB;WACjBV,SAAL,CAAe,2CAAf;WACKK,EAAL,CAAS,GAAEF,IAAK,SAAhB,EAA0BA,IAA1B;;;SAIGQ,SAAP,EAAkB;WACT,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;eAC7BC,MAAT,CAAgBJ,SAAhB,EAA2BK,IAA3B,CAAgCC,WAAW;gBACjCA,OAAR;OADF,EAEGC,KAFH,CAESvB,SAAS;eACTA,KAAP;OAHF;KADK,CAAP;;YASQwB,OAAV,EAAmB;cACPtB,SAAOJ,MAAP,CAAc0B,OAAd,EAAuB,MAAvB,CAAV;;;;AC3CJ,MAAM,EAACC,IAAD,EAAOC,QAAP,EAAiBC,SAAjB,EAA4BC,MAA5B,KAAsClC,QAAQ,IAAR,CAA5C;AACA,MAAM,EAACmC,KAAD,KAAUnC,QAAQ,YAAR,CAAhB;AAEA,IAAIoC,QAAQ,IAAIC,KAAJ,EAAZ;AACA,IAAI7B,SAAS,IAAIC,MAAJ,EAAb;AAEE,MAAM6B,UAAN,CAAiB;cAMHC,OAAO,KAAnB,EAA0B;SACnBX,OAAL,GAAe,EAACY,UAAU,kBAAX,EAA+BC,MAAM,QAArC,EAA+CC,QAAQ,GAAvD,EAA4DC,KAAK,iBAAjE,EAAf;UAEM9B,OAAO+B,QAAQC,IAArB;UACMC,MAAMjC,KAAKA,KAAKkC,MAAL,GAAc,CAAnB,CAAZ;QACID,QAAQ,IAAR,IAAgBA,QAAQ,KAAxB,IAAiCA,QAAQ,GAA7C,EAAkD;WAC3CE,SAAL,GAAiB,IAAjB;;YAEM9B,EAAR,CAAW,MAAX,EAAmB+B,QAAQ;UACrBA,SAAS,CAAb,EAAgB;aACTC,OAAL;;KAFJ;QAKIX,IAAJ,EAAU,KAAKY,IAAL;;SAGL;WACE,IAAI5B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UAClC;aACG2B,aAAL;aACKC,eAAL,GAAuB1B,IAAvB,CAA4B,MAAM;eAC3B2B,OAAL,GAAe3B,IAAf,CAAoB,MAAM;;WAA1B;SADF;OAFF,CAOE,OAAMrB,KAAN,EAAa;eACNA,KAAP;;KATG,CAAP;;kBAec;UACRiD,MAAN,CAAa,CACX,kBADW,EAEX,yBAFW,EAGX,2BAHW,EAIX,sBAJW,EAKX,kBALW,EAMX,wBANW,CAAb;;oBAUgB;WACT,IAAIhC,OAAJ,CAAYC,WAAW;YACtBgC,UAAUpB,MAAM7B,KAAN,CAAY,SAAZ,EAAuB,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,IAAjC,CAAvB,CAAhB;cACQW,EAAR,CAAW,OAAX,EAAoBZ,SAAS;eACpBA,KAAP,CAAaA,KAAb;OADF;cAGQY,EAAR,CAAW,OAAX,EAAqB+B,IAAD,IAAU;YACxBA,SAAS,CAAb,EAAgB;iBACP3C,KAAP,CAAa,mCAAb;;;gBAGMmD,KAAR,CAAcC,GAAd;OALF;KALK,CAAP;;mBAeeC,IAAjB,EAAuB;WACd,IAAIpC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;YAChCd,SAAN,CAAgB,sBAAhB;WACKiD,SAAL,GAAiB,EAAjB;YAEMA,YAAY,CAChB,KAAKC,QAAL,CAAcC,YAAY,wBAA1B,EAAoDH,IAApD,CADgB,EAEhB,KAAKE,QAAL,CAAcC,YAAY,oBAA1B,CAFgB,EAGhB,KAAKD,QAAL,CAAcC,YAAY,yBAA1B,EAAqDH,IAArD,CAHgB,EAIhB,KAAKE,QAAL,CAAcC,YAAY,uBAA1B,EAAmDH,IAAnD,CAJgB,EAKhB,KAAKE,QAAL,CAAcC,YAAY,wBAA1B,CALgB,EAMhB,KAAKD,QAAL,CAAcC,YAAY,8BAA1B,CANgB,CAAlB;cASQC,GAAR,CAAYH,SAAZ,EAAuBjC,IAAvB,CAA4B,MAAM;;OAAlC;KAbK,CAAP;;YAmBQ;WACD,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UAClC;aACGuC,UAAL,GAAkBrC,IAAlB,CAAuBC,WAAW;eAC3BqC,gBAAL,CAAsBrC,OAAtB,EAA+BD,IAA/B,CAAoC,MAAM;iBACnCuC,SAAL,GAAiBvC,IAAjB,CAAsB,MAAM;;aAA5B;WADF;SADF;OADF,CAQE,OAAMrB,KAAN,EAAa;eACNA,KAAP;;KAVG,CAAP;;mBAee;WACR,IAAIiB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;YAChCyB,OAAN,CAAc,CACZ,kBADY,EAEZ,yBAFY,EAGZ,2BAHY,EAIZ,sBAJY,EAKZ,kBALY,EAMZ,wBANY,CAAd;KADK,CAAP;;eAYW;WACJ,IAAI3B,OAAJ,CAAYC,WAAW;UACxB,KAAKwB,SAAT,EAAoB;eACXxB,QAAQ,KAAKI,OAAb,CAAP;;YAEIN,YAAY,CAAC;cACX,OADW;cAEX,KAFW;iBAGR,6BAHQ;iBAIR;OAJO,EAKf;cACK,OADL;cAEK,MAFL;iBAGQ,SAHR;iBAIQ;OATO,EAUf;cACK,OADL;cAEK,UAFL;iBAGQ,aAHR;gBAIO,IAJP;iBAKQ;OAfO,EAgBf;cACK,OADL;cAEK,QAFL;iBAGQ,YAHR;iBAIQ;OApBO,CAAlB;YAsBMI,MAAN,CAAaJ,SAAb,EAAwBK,IAAxB,CAA6BC,WAAW;gBAC9BO,MAAM,KAAKP,OAAX,EAAoBA,OAApB,CAAR;OADF;KA1BK,CAAP;;cAgCU;WACH,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UAClC;aACG0C,aAAL,GAAqBxC,IAArB,CAA0B,MAAM;eACzByC,mBAAL,GAA2BzC,IAA3B,CAAgC,MAAM;iBAC/B0C,YAAL,GAAoB1C,IAApB,CAAyB,MAAM;mBACxB2C,YAAL,GAAoB3C,IAApB,CAAyB,MAAM;sBACvBpB,KAAN,CAAY,OAAZ,EAAqB,CAAC,6BAAD,CAArB;sBAEMI,SAAN,CAAgB,iBAAhB;sBACMJ,KAAN,CAAY,SAAZ,EAAuB,CAAC,SAAD,EAAY,OAAZ,CAAvB;sBACMA,KAAN,CAAY,aAAZ,EAA2B,CAAC,SAAD,EAAY,QAAZ,CAA3B;sBAEMI,SAAN,CAAgB,0BAAhB;sBACMJ,KAAN,CAAY,SAAZ,EAAuB,CAAC,QAAD,EAAW,OAAX,CAAvB;sBACMA,KAAN,CAAY,aAAZ,EAA2B,CAAC,QAAD,EAAW,QAAX,CAA3B;sBAEMI,SAAN,CAAgB,yBAAhB;wBAGQ,CAAR;eAdF;aADF;WADF;SADF;OADF,CAuBE,OAAML,KAAN,EAAa;eACNA,KAAP;;KAzBG,CAAP;;kBA8Bc;UACRK,SAAN,CAAgB,kBAAhB;WACO,IAAIY,OAAJ,CAAYC,WAAW;WAEvB+C,aAAL,CAAmB,kBAAnB,EAAuC,KAAKX,SAAL,CAAe,aAAf,CAAvC,EAAsEjC,IAAtE,CAA2E,MAAM;;OAAjF;KAFK,CAAP;;wBAQoB;WACb,IAAIJ,OAAJ,CAAYC,WAAW;YACtBb,SAAN,CAAgB,wBAAhB;YACM6D,aAAa,CACjB,KAAKD,aAAL,CAAmB,yBAAnB,EAA8C,KAAKX,SAAL,CAAe,YAAf,CAA9C,CADiB,CAAnB;cAGQG,GAAR,CAAYS,UAAZ,EAAwB7C,IAAxB,CAA6B,MAAM;;OAAnC;KALK,CAAP;;iBAWa;UACPhB,SAAN,CAAgB,qBAAhB;WACO,IAAIY,OAAJ,CAAYC,WAAW;YACtBgD,aAAa,CACjB,KAAKD,aAAL,CAAmB,sBAAnB,EAA2C,KAAKX,SAAL,CAAe,SAAf,CAA3C,CADiB,EAEjB,KAAKW,aAAL,CAAmB,2BAAnB,EAAgD,KAAKX,SAAL,CAAe,cAAf,CAAhD,CAFiB,CAAnB;cAIQG,GAAR,CAAYS,UAAZ,EAAwB7C,IAAxB,CAA6B,MAAM;;OAAnC;KALK,CAAP;;iBAWa;WACN,IAAIJ,OAAJ,CAAYC,WAAW;YACtBb,SAAN,CAAgB,iBAAhB;YACM6D,aAAa,CACjB,KAAKD,aAAL,CAAmB,kBAAnB,EAAuC,KAAKX,SAAL,CAAe,aAAf,CAAvC,CADiB,EAEjB,KAAKW,aAAL,CAAmB,wBAAnB,EAA6C,KAAKX,SAAL,CAAe,mBAAf,CAA7C,CAFiB,CAAnB;cAIQG,GAAR,CAAYS,UAAZ,EAAwB7C,IAAxB,CAA6B,MAAM;;OAAnC;KANK,CAAP;;eAgBWb,IAAb,EAAmB;WACVA,KAAK2D,KAAL,CAAW,kBAAX,EAA+B,CAA/B,EAAkCC,OAAlC,CAA0C,GAA1C,EAA+C,EAA/C,CAAP;;WAQO5D,IAAT,EAAeD,IAAf,EAAqB;WACZ,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;YAChCkD,OAAO,KAAKC,YAAL,CAAkB9D,IAAlB,CAAb;eACSA,IAAT,EAAe,OAAf,EAAwB,CAAC+D,GAAD,EAAMC,OAAN,KAAkB;YACpCjE,QAAQkE,OAAOC,IAAP,CAAYnE,IAAZ,EAAkBkC,MAA9B,EAAsC;eAC/B,IAAID,GAAT,IAAgBiC,OAAOC,IAAP,CAAYnE,IAAZ,CAAhB,EAAmC;gBAC7BiE,QAAQG,QAAR,CAAkB,OAAMnC,GAAI,KAA5B,CAAJ,EAAuC;kBACjCoC,MAAM,IAAIC,MAAJ,CAAW,SAASrC,GAAT,GAAe,KAA1B,EAAiC,CAAC,GAAD,CAAjC,CAAV;wBACUgC,QAAQJ,OAAR,CAAgBQ,GAAhB,EAAqBrE,KAAKiC,GAAL,CAArB,CAAV;mBACKc,SAAL,CAAee,IAAf,IAAuBG,OAAvB;;;SALN,MAQO;eACAlB,SAAL,CAAee,IAAf,IAAuBG,OAAvB;;;OAVJ;KAFK,CAAP;;gBAuBYhE,IAAd,EAAoBsE,OAApB,EAA6B;WACpB,IAAI7D,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;gBAC5BX,IAAV,EAAgBsE,OAAhB,EAAyBP,OAAO;;OAAhC;KADK,CAAP;;YAMO;UACDQ,MAAM,CACR,kBADQ,EAER,qBAFQ,EAGR,yBAHQ,EAIR,2BAJQ,EAKR,sBALQ,EAMR,kBANQ,EAOR,wBAPQ,CAAZ;SASK,IAAIC,GAAT,IAAgBD,GAAhB,EAAqB;0BACb,MAAN,EAAc,CAAC,IAAD,EAAO,KAAP,EAAcC,GAAd,CAAd;0BACM,MAAN,EAAc,CAAC,IAAD,EAAOA,MAAM,SAAb,EAAwBA,GAAxB,CAAd;;wBAEI,MAAN,EAAc,CAAC,QAAD,CAAd;;;AAGJ,YAAe,IAAIhD,UAAJ,EAAf;;"}